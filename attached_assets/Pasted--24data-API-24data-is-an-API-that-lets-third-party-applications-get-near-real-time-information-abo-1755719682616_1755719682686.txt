# 24data API
24data is an API that lets third party applications get near real-time information about the aircraft and controllers online in ATC 24.

If you intend on deploying a web-app, all routes should be polled/connected to by your __server__, as web-browsers will not permit 3rd party __clients__ from making cross origin requests due to our `Allow-Origin` header. Your server can then serve it to *your* clients via SSE; WSS; polling our API, caching the data, and serving that to downstream clients; (etc.). However, your server should not just be a simply proxy for your clients, otherwise you'll run into rate limits with more than 3 downstream clients.

Host: `https://24data.ptfs.app`.
## REST Routes:
GET `/acft-data`
Rate limit: 75 requests per minute. 3rd party servers __should__ poll at 20 requests per minute (every 3 seconds).
Returns **`AircraftData`** for all piloted aircraft in the ATC 24 private server.

GET `/acft-data/event`
Rate limit: Shares rate limit with `/acft-data`. Polling both acft-data routes at the suggested rate will use 40 requests per minute.
Returns **`AircraftData`** for all piloted aircraft in the ATC 24 __event__ server.

GET `/controllers`
Rate limit: 45 requests per minute. 3rd party servers __should__ poll at 10 requests per minute (every 6 seconds).
Returns **`Position[]`**.
## WebSocket:
Instead of short-polling, your server can get information from 24data **live** by opening a connection to our WebSocket.
A maximum of 3 connections can be made to the WebSocket. Your server should only need one.
**Make sure your Origin header is __not__ set, or is empty** when requesting from your server. Browsers will __always__ set the Origin header, and can't be used to connect to this WebSocket.

`wss://24data.ptfs.app/wss`

You should receive a stream of data in this format:
```json
{
  "t": "EVENT_TYPE",
  "d": "any" // Object or Array. See `Event Types` section below for corresponding data types.
}
```
### Event Types
`"ACFT_DATA"         `: **`AircraftData`** from the ATC 24 main server.
`"EVENT_ACFT_DATA"   `: **`AircraftData`** from the ATC 24 __event__ server.
`"FLIGHT_PLAN"       `: Stream of submitted **`FlightPlan`**s for the ATC 24 main server.
`"EVENT_FLIGHT_PLAN" `: Stream of submitted **`FlightPlan`**s for the ATC 24 __event__ server.
`"CONTROLLERS"       `: **`Position[]`**  claimed in #online-atc
## Types:
### AircraftData:
Object served with Key-Value pairs, callsigns being the key and corresponding data being the value.
```json
{
  "Callsign-1001": { /*...*/ },
  "Callsign-1002": { /*...*/ }
}
```
Example:
```ts
{
  "Shamrock-1337": {                // Object key is the callsign of the aircraft.
    "heading": 290,                 // Heading in degrees. 360 is North.
    "playerName": "PTC_Helper",     // Roblox username of the pilot.
    "altitude": 3069,               // Altitude in ft of the aircraft. 1 stud = 1.8372 ft for this conversion.
    "aircraftType": "Airbus A380",  // Aircraft type.
    "position": {                   // Position of the aircraft in studs away from the origin.
        "y": -23349,                // -y is North.
        "x": -10906                 // -x is West.
    },
    "speed": 299,                   // Airspeed as reported in knots. NOTE: Not equivalent to nautical miles per hour. See details below.
    "wind": "357/15",               // Wind in degrees/speed in knots. See note for knots.
    "isOnGround"?: false,           // If the aircraft is in Taxiing mode. NOTE: This property is not included helicopter aircraft data.
    "groundSpeed": 208.660516305461 // Groundspeed as reported in knots. See note for knots
  },
  // ...
}
```
**__NOTE__**
The planekit uses knots internally, and applies `1 knot = 0.5442765 studs/sec` to aircraft. This is actually lower than the real conversion, but is done so that runways can be smaller and islands feel farther apart.
The real conversion between knots and studs/sec is `1 knot = 0.918650795 studs/sec` (Derived from `1 stud = 0.56 metres`, the scale used in-game. Full derivation is left as an exercise to the reader).
If you need to do calculations related to expected distance and nautical miles, `Real knots = game knots * 0.592172785`.
`3307.14286 studs = 1 NMi`.
** **
Additionally, aircraft are further slowed linearly dependent on altitude above 2,000ft in order to increase time spent in cruise. This is not shown in `speed`, but is in `groundSpeed`.
### FlightPlan
A single filed Flight Plan. Only accessible through WebSocket.
Example:
```json
{
  "robloxName": "PTC_Helper",       // Roblox username of command operator.
  "callsign": "Shamrock-1337",      // Set by user in command.
  "realcallsign": "Shamrock-1337",  // Also set by user, but should be in-game callsign.
  "aircraft": "A330",               // Aircraft filed.
  "flightrules": "IFR",             // IFR/VFR.
  "departing": "IMLR",              // Origin airport.
  "arriving": "IGRV",               // Destination airport.
  "route": "N/A",                   // Route if specified, "N/A" otherwise.
  "flightlevel": "040"              // Flight level.
}
```
### Position[]:
Array of Positions
Example:
```json
[
  {
    "holder": "AutumnHTDG", // Roblox username of the position holder.
    "claimable": false,     // If the position is claimable.
    "airport": "Rockford",  // Position's airport.
    "position": "Tower",    // Position type (Ground, Tower)
    "queue": [              // Array of Roblox usernames of people queued. [0] is first.
      "Orange12345",        // Number 1 in queue.
      "TreelonsMusk",       // Number 2 in queue.
    ]
  },
  {
    "holder": null,
    "claimable": true,
    "airport": "Rockford",
    "position": "Ground",
    "queue": []
  },
  // ...
]
```

